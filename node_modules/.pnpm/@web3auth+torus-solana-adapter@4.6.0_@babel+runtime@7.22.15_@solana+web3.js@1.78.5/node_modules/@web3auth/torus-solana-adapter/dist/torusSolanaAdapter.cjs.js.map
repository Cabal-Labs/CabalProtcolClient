{"version":3,"file":"torusSolanaAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/torus-solana-adapter/webpack/bootstrap","webpack://@web3auth/torus-solana-adapter/webpack/runtime/compat get default export","webpack://@web3auth/torus-solana-adapter/webpack/runtime/define property getters","webpack://@web3auth/torus-solana-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/torus-solana-adapter/webpack/runtime/make namespace object","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@toruslabs/solana-embed\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/base-solana-adapter\"","webpack://@web3auth/torus-solana-adapter/external commonjs2 \"@web3auth/solana-provider\"","webpack://@web3auth/torus-solana-adapter/./src/solanaWalletAdapter.ts","webpack://@web3auth/torus-solana-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@toruslabs/solana-embed\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-solana-adapter\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/solana-provider\");","import Torus, { NetworkInterface, TorusCtorArgs, TorusLoginParams, TorusParams } from \"@toruslabs/solana-embed\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n  Web3AuthError,\n} from \"@web3auth/base\";\nimport { BaseSolanaAdapter } from \"@web3auth/base-solana-adapter\";\nimport { ITorusWalletProvider, TorusInjectedProvider } from \"@web3auth/solana-provider\";\n\nexport interface SolanaWalletOptions extends BaseAdapterSettings {\n  adapterSettings?: TorusCtorArgs;\n  loginSettings?: TorusLoginParams;\n  initParams?: Omit<TorusParams, \"network\">;\n}\n\nexport class SolanaWalletAdapter extends BaseSolanaAdapter<void> {\n  readonly name: string = WALLET_ADAPTERS.TORUS_SOLANA;\n\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.SOLANA;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.SOLANA;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  public torusInstance: Torus | null = null;\n\n  private torusWalletOptions?: TorusCtorArgs;\n\n  private initParams?: TorusParams;\n\n  private loginSettings?: TorusLoginParams = {};\n\n  private solanaProvider: TorusInjectedProvider | null = null;\n\n  constructor(params: SolanaWalletOptions = {}) {\n    super(params);\n    this.torusWalletOptions = params.adapterSettings || {};\n    this.initParams = params.initParams || {};\n    this.loginSettings = params.loginSettings || {};\n  }\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.solanaProvider) {\n      return this.solanaProvider?.provider || null;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n    const network: NetworkInterface = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n\n    this.torusInstance = new Torus(this.torusWalletOptions);\n    log.debug(\"initializing torus solana adapter init\");\n    await this.torusInstance.init({ showTorusButton: false, ...this.initParams, network });\n\n    this.solanaProvider = new TorusInjectedProvider({\n      config: {\n        chainConfig: this.chainConfig as CustomChainConfig,\n      },\n    });\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.TORUS_SOLANA);\n\n    try {\n      log.debug(\"initializing torus solana adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      log.error(\"Failed to connect with cached torus solana provider\", error);\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    if (!this.solanaProvider) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.TORUS_SOLANA });\n    try {\n      await this.torusInstance.login(this.loginSettings);\n      try {\n        const torusInpageProvider = this.torusInstance.provider as unknown as ITorusWalletProvider;\n        torusInpageProvider.sendTransaction = this.torusInstance.sendTransaction.bind(this.torusInstance);\n        torusInpageProvider.signAllTransactions = this.torusInstance.signAllTransactions.bind(this.torusInstance);\n        torusInpageProvider.signMessage = this.torusInstance.signMessage.bind(this.torusInstance);\n        torusInpageProvider.signTransaction = this.torusInstance.signTransaction.bind(this.torusInstance);\n        await this.solanaProvider.setupProvider(torusInpageProvider);\n      } catch (error: unknown) {\n        // some issue in solana wallet, always connecting to mainnet on init.\n        // fallback to change network if not connected to correct one on login.\n        if (error instanceof Web3AuthError && error.code === 5010) {\n          const { chainId, blockExplorer, displayName, rpcTarget, ticker, tickerName } = this.chainConfig as CustomChainConfig;\n          const network = { chainId, rpcTarget, blockExplorerUrl: blockExplorer, displayName, tickerName, ticker, logo: \"\" };\n          await this.torusInstance.setProvider(network);\n        } else {\n          throw error;\n        }\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      this.torusInstance.showTorusButton();\n      this.emit(ADAPTER_STATUS.CONNECTED, { adapter: WALLET_ADAPTERS.TORUS_SOLANA, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with torus solana wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    await this.torusInstance.logout();\n    if (options.cleanup) {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.torusInstance = null;\n      this.solanaProvider = null;\n    } else {\n      // ready to connect again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    if (!this.torusInstance) throw WalletInitializationError.notReady(\"Torus wallet is not initialized\");\n    const userInfo = await this.torusInstance.getUserInfo();\n    return userInfo;\n  }\n}\n","export * from \"./solanaWalletAdapter\";\n"],"names":["Torus","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","Web3AuthError","BaseSolanaAdapter","TorusInjectedProvider","SolanaWalletAdapter","constructor","params","TORUS_SOLANA","SOLANA","EXTERNAL","NOT_READY","torusWalletOptions","adapterSettings","initParams","loginSettings","provider","status","CONNECTED","solanaProvider","_","Error","init","options","checkInitializationRequirements","chainId","blockExplorer","displayName","rpcTarget","ticker","tickerName","chainConfig","network","blockExplorerUrl","logo","torusInstance","debug","showTorusButton","config","READY","emit","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","notReady","CONNECTING","adapter","login","torusInpageProvider","sendTransaction","bind","signAllTransactions","signMessage","signTransaction","setupProvider","code","setProvider","reconnected","connectionError","disconnect","cleanup","disconnectSession","logout","getUserInfo","notConnectedError","userInfo"],"sourceRoot":""}