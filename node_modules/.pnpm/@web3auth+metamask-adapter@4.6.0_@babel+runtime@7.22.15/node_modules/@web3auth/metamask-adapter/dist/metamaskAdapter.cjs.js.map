{"version":3,"file":"metamaskAdapter.cjs.js","mappings":"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","sources":["webpack://@web3auth/metamask-adapter/webpack/bootstrap","webpack://@web3auth/metamask-adapter/webpack/runtime/compat get default export","webpack://@web3auth/metamask-adapter/webpack/runtime/define property getters","webpack://@web3auth/metamask-adapter/webpack/runtime/hasOwnProperty shorthand","webpack://@web3auth/metamask-adapter/webpack/runtime/make namespace object","webpack://@web3auth/metamask-adapter/external commonjs2 \"@babel/runtime/helpers/defineProperty\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@metamask/detect-provider\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@web3auth/base\"","webpack://@web3auth/metamask-adapter/external commonjs2 \"@web3auth/base-evm-adapter\"","webpack://@web3auth/metamask-adapter/./src/metamaskAdapter.ts","webpack://@web3auth/metamask-adapter/./src/index.ts"],"sourcesContent":["// The require scope\nvar __webpack_require__ = {};\n\n","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = (module) => {\n\tvar getter = module && module.__esModule ?\n\t\t() => (module['default']) :\n\t\t() => (module);\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@babel/runtime/helpers/defineProperty\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@metamask/detect-provider\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base\");","const __WEBPACK_NAMESPACE_OBJECT__ = require(\"@web3auth/base-evm-adapter\");","import detectEthereumProvider from \"@metamask/detect-provider\";\nimport {\n  ADAPTER_CATEGORY,\n  ADAPTER_CATEGORY_TYPE,\n  ADAPTER_EVENTS,\n  ADAPTER_NAMESPACES,\n  ADAPTER_STATUS,\n  ADAPTER_STATUS_TYPE,\n  AdapterInitOptions,\n  AdapterNamespaceType,\n  BaseAdapterSettings,\n  CHAIN_NAMESPACES,\n  ChainNamespaceType,\n  CONNECTED_EVENT_DATA,\n  CustomChainConfig,\n  log,\n  SafeEventEmitterProvider,\n  UserInfo,\n  WALLET_ADAPTERS,\n  WalletInitializationError,\n  WalletLoginError,\n} from \"@web3auth/base\";\nimport { BaseEvmAdapter } from \"@web3auth/base-evm-adapter\";\n\ninterface EthereumProvider extends SafeEventEmitterProvider {\n  isMetaMask?: boolean;\n  isConnected: () => boolean;\n  chainId: string;\n}\nexport type MetamaskAdapterOptions = BaseAdapterSettings;\n\nclass MetamaskAdapter extends BaseEvmAdapter<void> {\n  readonly adapterNamespace: AdapterNamespaceType = ADAPTER_NAMESPACES.EIP155;\n\n  readonly currentChainNamespace: ChainNamespaceType = CHAIN_NAMESPACES.EIP155;\n\n  readonly type: ADAPTER_CATEGORY_TYPE = ADAPTER_CATEGORY.EXTERNAL;\n\n  readonly name: string = WALLET_ADAPTERS.METAMASK;\n\n  public status: ADAPTER_STATUS_TYPE = ADAPTER_STATUS.NOT_READY;\n\n  private metamaskProvider: EthereumProvider | null = null;\n\n  get provider(): SafeEventEmitterProvider | null {\n    if (this.status === ADAPTER_STATUS.CONNECTED && this.metamaskProvider) {\n      return this.metamaskProvider as SafeEventEmitterProvider;\n    }\n    return null;\n  }\n\n  set provider(_: SafeEventEmitterProvider | null) {\n    throw new Error(\"Not implemented\");\n  }\n\n  async init(options: AdapterInitOptions = {}): Promise<void> {\n    await super.init(options);\n    super.checkInitializationRequirements();\n    this.metamaskProvider = (await detectEthereumProvider({ mustBeMetaMask: true })) as EthereumProvider;\n    if (!this.metamaskProvider) throw WalletInitializationError.notInstalled(\"Metamask extension is not installed\");\n    this.status = ADAPTER_STATUS.READY;\n    this.emit(ADAPTER_EVENTS.READY, WALLET_ADAPTERS.METAMASK);\n    try {\n      log.debug(\"initializing metamask adapter\");\n      if (options.autoConnect) {\n        this.rehydrated = true;\n        await this.connect();\n      }\n    } catch (error) {\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n    }\n  }\n\n  async connect(): Promise<SafeEventEmitterProvider | null> {\n    super.checkConnectionRequirements();\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not able to connect with metamask\");\n\n    this.status = ADAPTER_STATUS.CONNECTING;\n    this.emit(ADAPTER_EVENTS.CONNECTING, { adapter: WALLET_ADAPTERS.METAMASK });\n    try {\n      await this.metamaskProvider.request({ method: \"eth_requestAccounts\" });\n      const { chainId } = this.metamaskProvider;\n      if (chainId !== (this.chainConfig as CustomChainConfig).chainId) {\n        await this.switchChain(this.chainConfig as CustomChainConfig);\n      }\n      this.status = ADAPTER_STATUS.CONNECTED;\n      if (!this.provider) throw WalletLoginError.notConnectedError(\"Failed to connect with provider\");\n      this.provider.once(\"disconnect\", () => {\n        // ready to be connected again\n        this.disconnect();\n      });\n      this.emit(ADAPTER_EVENTS.CONNECTED, { adapter: WALLET_ADAPTERS.METAMASK, reconnected: this.rehydrated } as CONNECTED_EVENT_DATA);\n      return this.provider;\n    } catch (error) {\n      // ready again to be connected\n      this.status = ADAPTER_STATUS.READY;\n      this.rehydrated = false;\n      this.emit(ADAPTER_EVENTS.ERRORED, error);\n      throw WalletLoginError.connectionError(\"Failed to login with metamask wallet\");\n    }\n  }\n\n  async disconnect(options: { cleanup: boolean } = { cleanup: false }): Promise<void> {\n    await super.disconnectSession();\n    this.provider?.removeAllListeners();\n    if (options.cleanup) {\n      this.status = ADAPTER_STATUS.NOT_READY;\n      this.metamaskProvider = null;\n    } else {\n      // ready to be connected again\n      this.status = ADAPTER_STATUS.READY;\n    }\n    await super.disconnect();\n  }\n\n  async getUserInfo(): Promise<Partial<UserInfo>> {\n    if (this.status !== ADAPTER_STATUS.CONNECTED) throw WalletLoginError.notConnectedError(\"Not connected with wallet, Please login/connect first\");\n    return {};\n  }\n\n  private async switchChain(chainConfig: CustomChainConfig): Promise<void> {\n    if (!this.metamaskProvider) throw WalletLoginError.notConnectedError(\"Not connected with wallet\");\n    try {\n      await this.metamaskProvider.request({\n        method: \"wallet_switchEthereumChain\",\n        params: [{ chainId: chainConfig.chainId }],\n      });\n    } catch (switchError: unknown) {\n      // This error code indicates that the chain has not been added to MetaMask.\n      if ((switchError as { code: number }).code === 4902) {\n        await this.metamaskProvider.request({\n          method: \"wallet_addEthereumChain\",\n          params: [\n            {\n              chainId: chainConfig.chainId,\n              chainName: chainConfig.displayName,\n              rpcUrls: [chainConfig.rpcTarget],\n              blockExplorerUrls: [chainConfig.blockExplorer],\n              nativeCurrency: {\n                name: chainConfig.tickerName,\n                symbol: chainConfig.ticker,\n                decimals: chainConfig.decimals || 18,\n              },\n            },\n          ],\n        });\n      } else {\n        throw switchError;\n      }\n    }\n  }\n}\n\nexport { MetamaskAdapter };\n","export * from \"./metamaskAdapter\";\n"],"names":["detectEthereumProvider","ADAPTER_CATEGORY","ADAPTER_EVENTS","ADAPTER_NAMESPACES","ADAPTER_STATUS","CHAIN_NAMESPACES","log","WALLET_ADAPTERS","WalletInitializationError","WalletLoginError","BaseEvmAdapter","MetamaskAdapter","EIP155","EXTERNAL","METAMASK","NOT_READY","provider","status","CONNECTED","metamaskProvider","_","Error","init","options","checkInitializationRequirements","mustBeMetaMask","notInstalled","READY","emit","debug","autoConnect","rehydrated","connect","error","ERRORED","checkConnectionRequirements","notConnectedError","CONNECTING","adapter","request","method","chainId","chainConfig","switchChain","once","disconnect","reconnected","connectionError","cleanup","disconnectSession","removeAllListeners","getUserInfo","params","switchError","code","chainName","displayName","rpcUrls","rpcTarget","blockExplorerUrls","blockExplorer","nativeCurrency","name","tickerName","symbol","ticker","decimals"],"sourceRoot":""}